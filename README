Nidhugg is a bug-finding tool which targets bugs caused by concurrency
and relaxed memory consistency in concurrent programs. It works on the
level of LLVM internal representation, which means that it can be used
for programs written in languages such as C or C++.

Currently Nidhugg supports the SC, TSO and PSO memory models. Target
programs should use pthreads for concurrency, and each thread should
be deterministic when run in isolation.

Installation
************

Nidhugg can be compiled and installed on UNIX-like systems.

Requirements
============

   1. A C++ compiler supporting C++11. For example g++ version 4.6 or
      higher, or clang++ version 3.1 or higher. (For compiling the
      tool Nidhugg.)

   2. The C compiler clang. (For use by Nidhugg as a frontend for C
      compilation.)

   3. Standard C/C++ libraries.

   4. GNU Autotools (autoconf & automake).

   5. Python version 3.0 or higher.

   6. The LLVM library and headers, version 3.3 or higher. If you are
      compiling the LLVM library from sources, see Compiling LLVM
      below.

   7. Foreign Function Interface (libffi) library and headers.

   (8). Optional: Boost Unit Test Framework.

   (9). Optional: Valgrind

For Users of Debian-like Systems
--------------------------------

   On a Debian-like Linux distribution (such as e.g. Ubuntu), satisfy
   the requirements by installing the following packages:

   Mandatory:
   clang, libc6, libc6-dev, libstdc++6, autoconf, automake, python3,
   llvm, llvm-dev, libffi-dev

   Optional:
   libboost-test-dev, valgrind

Getting Nidhugg
===============

   Git users can clone Nidhugg as follows:

   $ git clone https://github.com/carlleonardsson/nidhugg

   Non git users may find it easier to download the latest revision as
   a zip archive:

   https://github.com/carlleonardsson/nidhugg/archive/master.zip

Basic Installation
==================

   The following assumes that you are in a shell in the main directory
   of Nidhugg.

   1. Use GNU Autotools to build the configure script:

      $ autoreconf --install

   2. Build as usual. See Installation Options below for options about
      e.g. installation location.

      $ ./configure
      $ make

   3. Optionally install:

      $ make install

   4. Optionally run test suite (Boost Unit Test Framework required):

      $ make test

      or (Valgrind required)

      $ make valtest

Installation Options
====================

   The configure script is built with GNU autotools, and should accept
   the usual options and environment variables. This section outlines
   some of the typical use cases.

Changing Installation Directory
-------------------------------

   The command 'make install' will install Nidhugg and its
   documentation in the directories which are standard on your
   system. To override this behavior add the switch --prefix to the
   './configure' command:

   $ ./configure --prefix=/your/desired/install/path

Specifying Compiler
-------------------

   When the configure script is invoked, it will by GNU autotools
   magic determine which C++ compiler will be used during
   compilation. In case e.g. your default compiler does not support
   C++11, but you have the compiler g++-4.6 installed at a
   non-standard location you may want to override this. In order to do
   so, specify the path to g++-4.6 in CXX when invoking the
   './configure' command:

   $ ./configure CXX='/path/to/g++-4.6'

Specifying LLVM Installation
----------------------------

   If the configure script does not find your LLVM installation, or
   does not find the installation which you want to use (see output
   from configure), you may specify the installation location of LLVM
   with the --with-llvm switch. Below, /path/to/llvm should be the
   path to the root of the LLVM installation, i.e. the directory which
   contains bin/llvm-config and lib/libllvm.a .

   $ ./configure --with-llvm='/path/to/llvm'

Compiling LLVM
==============

   LLVM is recommended to be compiled with optimized build and with
   libffi.

   $ cd llvm-*.src
   $ ./configure --prefix /your/llvm/install/path --enable-optimized --enable-libffi
   $ make
   $ make install

License
*******

   Nidhugg is licensed under GPLv3. See COPYING.

   Nidhugg is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   Nidhugg is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

Contact / Bug Report
********************

   Feedback, questions or bug reports should be directed to Carl
   Leonardsson (carl.leonardsson@it.uu.se).
